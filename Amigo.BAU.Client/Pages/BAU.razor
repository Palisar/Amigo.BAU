@page "/bau"
@using Amigo.BAU.Persistance.QueryModels
@using Microsoft.Win32.SafeHandles
@inject IAmigoBAUClient _client

<PageTitle>BAU</PageTitle>


<h3>Welcome to the support wheel of fate</h3>

<div class="card">
    <div class="card-body">
        @if (Workers == null)
        {
            <h2>Click the button to see who goes today</h2>
            <div class="btn">
                <button type="button" onclick="@(() => GetWorkers())">Who's Up </button>
                <p class="alert-info">@errorMessage</p>
            </div>
        }
        else
        {
            <div class="text-info">

                <h2>Today's staff will be:</h2>

                <div class="card-group">
                    @foreach (var worker in Workers)
                    {
                        <div class="card">
                            <div class="card-body">
                                <h3>Name : @worker.Name</h3>
                                <h2>Email: @worker.Email</h2>
                            </div>
                            
                        </div>

                    }
                </div>
                @if (!IsStaffConfirmed)
                {
                    <div>
                        <h5>Would you like to confirm these candidates for today?</h5>
                        <div class="btn-group">
                            <button onclick="@(() => ConfirmStaff())">Yes</button> <button onclick="@(() => Reset())">No</button>
                        </div>
                    </div>
                }
                else
                {
                    <h5>Today's staff are confirmed.</h5>
                }
                
            </div>
        }
    </div>
</div>
@code {
    private bool Clicked { get; set; } 
    private bool IsStaffConfirmed { get; set; } 
    private string errorMessage = string.Empty;
    private ShiftWorkerResponse[]? Workers { get; set; }

    protected override void OnInitialized()
    {
        Workers = null;
        Clicked = false;
        IsStaffConfirmed = false;
    }

    private async void GetWorkers()
    {
        Clicked = true;
        var response = await _client.WheelOfFate();
        if (response.Content is null)
        {
            errorMessage = "There was an issue retrieving the data";
            this.StateHasChanged();
            return;
        }
        Workers = response.Content.ToArray();
        this.StateHasChanged();
    }

    private void Reset()
    {
        Workers = null;
        Clicked = false;
        this.StateHasChanged();
    }

    private async Task ConfirmStaff()
    {
        var response = await _client.UpdateEngineers();
        if (!response.IsSuccessStatusCode)
        {
            errorMessage = "There was an issue retrieving the data";
            this.StateHasChanged();
        }
        IsStaffConfirmed = true;
        this.StateHasChanged();
    }
}
